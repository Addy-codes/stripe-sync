from sqlalchemy.future import select
from sqlalchemy.exc import NoResultFound
from sqlalchemy.ext.asyncio import AsyncSession
from ...models.customers import Customer, IDMap

async def create_customer_in_db(db: AsyncSession, customer_data: dict, service_data: dict) -> Customer:
    """
    Create a new customer in the database and map to an external service ID.
    
    Args:
    - db: The database session.
    - customer_data: Dictionary containing 'email' and 'name'.
    - service_data: Dictionary containing 'local_id' and 'service_name'.
    
    Returns:
    - An instance of the created Customer.
    """
    # Create the customer entry
    new_customer = Customer(**customer_data)
    db.add(new_customer)
    await db.commit()
    await db.refresh(new_customer)  # Refresh to load the new customer ID generated by the database

    # Now create the mapping entry in id_map
    new_id_map = IDMap(**service_data)
    db.add(new_id_map)
    await db.commit()

    return new_customer

async def delete_customer_from_db(db: AsyncSession, customer_id: str) -> None:
    """
    Explicitly deletes a customer and its related entries from the database.

    This function first checks if the customer exists in the database. If the customer does not exist,
    it raises a NoResultFound exception. If the customer exists, it proceeds to delete any associated
    records in the 'IDMap' table, followed by the customer record itself. This ensures that all references
    and the main record are cleanly removed, adhering to referential integrity constraints.

    Args:
        db (AsyncSession): The session object for database interaction. It provides a transactional scope
                           around a series of operations.
        customer_id (str): The unique identifier of the customer to be deleted.

    Returns:
        A success message indicating that the operations were completed successfully.

    Raises:
        NoResultFound: If no customer is found with the provided ID, indicating an attempt to delete a
                       non-existent record.
        HTTPException: If any exception occurs during the operation, it captures and raises an HTTP
                       exception suitable for API responses.
    """
    async with db.begin():
        # Check existence of the customer
        query = select(Customer).filter(Customer.id == customer_id)
        result = await db.execute(query)
        customer = result.scalars().first()

        if not customer:
            raise NoResultFound("No customer found with the given ID.")

        # Delete related IDMap entries to maintain data integrity
        idmap_query = select(IDMap).filter(IDMap.local_id == customer_id)
        idmap_result = await db.execute(idmap_query)
        idmaps = idmap_result.scalars().all()

        for idmap in idmaps:
            await db.delete(idmap)

        # Delete the customer last to avoid foreign key constraint issues
        await db.delete(customer)
        await db.commit()  # Commit all deletions to finalize the operation
        return "success"

async def get_customer_from_db(db: AsyncSession, customer_id: str) -> Customer:
    """
    Retrieve a customer by ID from the database.
    """
    async with db.begin():
        query = select(Customer).filter(Customer.id == customer_id)
        result = await db.execute(query)
        customer = result.scalars().first()
        if customer:
            return customer
        else:
            return None

async def update_customer_in_db(db: AsyncSession, customer_id: str, update_data: dict) -> Customer:
    """
    Update a customer in the database.
    """
    async with db.begin():
        query = select(Customer).filter(Customer.id == customer_id)
        result = await db.execute(query)
        customer = result.scalars().first()
        if customer:
            for key, value in update_data.items():
                setattr(customer, key, value)
            await db.commit()
            await db.refresh(customer)
            return customer
        else:
            raise NoResultFound("No customer found with the given ID.")


async def list_all_customers_from_db(db: AsyncSession) -> list:
    """
    List all customers from the database.
    """
    query = select(Customer)
    result = await db.execute(query)
    customers = result.scalars().all()
    return customers